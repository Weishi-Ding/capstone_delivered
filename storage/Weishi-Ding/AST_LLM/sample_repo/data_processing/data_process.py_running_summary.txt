```markdown
**Summary**:
This Python code repository is dedicated to a reinforcement learning project focused on Q-learning models. The first reviewed file contains essential functions for data manipulation and processing, which are crucial for training and evaluating the neural network-based Q-learning algorithms. These functions facilitate the conversion of data into formats suitable for neural network processing, calculation of Q-values, and adjustment of date formats for consistent data handling. The addition of the DQN class, Experience named tuple, and Experience_Buffer class in the subsequent file further enriches the repository by introducing core components for the neural network model and experience management, essential for the effective training of Q-learning models. The latest addition, the `Environment` class, extends the repository's functionality by simulating a stock trading environment, which is integral for applying the Q-learning models in a practical, dynamic setting. This class manages stock selection, time steps, and reward calculations, which are pivotal for creating realistic trading scenarios for the reinforcement learning agent. The most recent code chunk sets up the initial environment and tools required for conducting backtesting and analyzing trading strategies, integrating financial data retrieval which is crucial for realistic market simulations. The current file adds advanced data preprocessing and feature engineering functionalities, including normalization of data columns and calculation of moving averages, which are vital for preparing the stock trading data before it is fed into the Q-learning models. These preprocessing steps ensure that the data is in an optimal format for neural network training and evaluation, enhancing the accuracy and efficiency of the learning algorithms.

**Technology Stack**:
- **Python**: The primary programming language used for implementing the functions.
- **NumPy**: Utilized for handling numerical operations on arrays.
- **PyTorch**: A deep learning framework employed to convert arrays into tensors, which are then used in neural network computations. This integration is crucial for leveraging GPU acceleration during the training process, enhancing the efficiency and scalability of the Q-learning models.
- **Pandas**: Introduced for managing and manipulating structured data more efficiently, particularly used in the `Environment` class for handling stock trading data, and now extensively used in the latest file for data preprocessing and feature engineering tasks.
- **Tushare**: Newly introduced for accessing real-time and historical data from the Chinese stock market, essential for feeding accurate and up-to-date financial data into the trading strategies.

**Engineering Highlights**:
- The implementation of functions like `ndarray_to_tensor` and `oneDarray_to_tensor` demonstrates a thoughtful approach to data preprocessing, ensuring that data fed into the neural network is in the correct shape and format.
- The separation of functionality between calculating current Q-values (`get_cur_Qs`) and target Q-values (`get_target_Qs`) using different network models (policy and target networks) reflects a sophisticated understanding of reinforcement learning techniques, specifically the Double Q-learning algorithm, which helps in reducing overestimations of Q-values.
- The introduction of the `DQN` class and `Experience_Buffer` class highlights advanced engineering practices in managing neural network architectures and experience replay buffers, which are pivotal for the robustness and efficiency of the learning algorithms.
- The `Environment` class encapsulates the complexities of a stock trading environment, integrating elements such as stock selection, time management, and dynamic reward calculation, which are essential for training the agent in realistic market conditions.
- The setup of the initial environment for backtesting and strategy analysis through the import of essential libraries and modules, including Tushare for financial data retrieval, lays a solid foundation for subsequent data manipulation and model training.
- The addition of data preprocessing functions such as `normalize_column` and `add_avg` in the current file showcases meticulous attention to the preparation of input data, ensuring that the features are optimally formatted for neural network processing and Q-learning model training.

**Features**:
- **Data Transformation**: Functions such as `ndarray_to_tensor` and `oneDarray_to_tensor` transform NumPy arrays into PyTorch tensors, preparing the data for neural network processing.
- **Q-value Calculation**: The `get_cur_Qs` and `get_target_Qs` functions are pivotal in computing the Q-values needed for the Q-learning updates, facilitating the learning process of the agent.
- **Date Format Standardization**: The `adjust_date_format` function ensures that all date data within the project adheres to a uniform format (YYYY-MM-DD), which is crucial for maintaining consistency in data processing and logging.
- **Neural Network Model**: The `DQN` class encapsulates the neural network architecture specific to Q-learning, equipped with methods for initializing and executing forward passes.
- **Experience Management**: The `Experience_Buffer` class provides mechanisms for storing and sampling experiences, crucial for implementing experience replay which enhances training stability.
- **Environment Simulation**: The `Environment` class simulates a stock trading environment, handling stock selection, time step progression, and reward calculations based on trading actions, which are critical for applying reinforcement learning strategies in real-world scenarios.
- **Initial Setup for Backtesting**: The recent code chunk includes the setup of the initial environment and tools required for backtesting and strategy analysis, integrating essential libraries and modules for data processing and financial data retrieval.
- **Data Preprocessing**: New functions like `normalize_column` and `add_avg` enhance the data preparation process by normalizing data values and adding calculated moving averages, respectively, which are crucial for feature engineering in stock trading models.

**Usage**:
- The function `ndarray_to_tensor(array, batch_size, num_features)` is used to convert state and action arrays into tensors, reshaping them according to the batch size and number of features required by the neural network. This is essential for batch processing during neural network training.
- The `get_cur_Qs(policy_net, states, actions)` function utilizes the policy network to calculate the current Q-values for given states and actions, playing a critical role in the agent's decision-making process during training and evaluation phases.
- The `DQN` class is instantiated with specific input and output dimensions to match the requirements of the Q-learning task, and its `forward` method is used to compute the output from given input states.
- The `Experience_Buffer` is used to manage the experiences collected during training, with functionalities to add new experiences and sample batches of experiences for training the DQN model.
- The `Environment` class is used to initialize the trading environment with a dataframe containing stock data (`__init__(self, df)`), reset the environment to a default state (`reset(self)`), and process actions taken by the agent to update the state and calculate rewards (`step(self, action, portfolio)`).
- The initial setup for backtesting and strategy analysis is facilitated by importing necessary libraries and modules, including Tushare for accessing real-time and historical financial data, which is crucial for realistic market simulations.
- The `normalize_column(column)` function is used to scale the values of a specified column in a dataframe between 0 and 1, ensuring that the data is normalized before being processed further for neural network input.
- The `add_avg(df)` function calculates and adds a moving average of the 'close' price over a specified window to the dataframe, enriching the feature set available for the Q-learning model.
- The `process_data(df, test)` function is a comprehensive tool for preparing stock trading data, performing tasks such as dropping NaN values, resetting indexes, normalizing columns, and preparing the data for neural network input, streamlining the data preparation phase for model training and evaluation.
```
This updated README.md now includes comprehensive details from the current code file, enhancing the overall documentation of the Python code repository.